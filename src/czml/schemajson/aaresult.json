{
  "mergedProperties": {
    "unitCartesian": {
      "$ref": "Values/UnitCartesian3ListValue.json",
      "description": "The list of directions specified as three-dimensional unit magnitude Cartesian values, `[X, Y, Z, X, Y, Z, ...]`, in world coordinates in meters."
    },
    "unitSpherical": {
      "$ref": "Values/UnitSphericalListValue.json",
      "description": "The list of directions specified as unit spherical values `[Clock, Cone, Clock, Cone, ...]`, in radians. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis."
    },
    "reference": {
      "$ref": "Values/ReferenceValue.json",
      "description": "The offset specified as a reference to another property."
    },
    "velocityReference": {
      "$ref": "Values/VelocityReferenceValue.json",
      "description": "The orientation specified as the normalized velocity vector of a position property. The reference must be to a `position` property."
    },
    "arcType": {
      "$ref": "ArcType.json",
      "description": "The type of arc that should connect the positions of the polyline.",
      "default": "GEODESIC"
    },
    "number": {
      "$ref": "Values/IntegerValue.json",
      "description": "The integer."
    },
    "cartesian2": {
      "$ref": "Values/Cartesian2ListValue.json",
      "description": "The list of positions specified as two-dimensional Cartesian values `[X, Y, X, Y, ...]`."
    },
    "show": {
      "$ref": "Boolean.json",
      "description": "Whether or not the wall is shown.",
      "default": true
    },
    "image": {
      "$ref": "ImageMaterial.json",
      "description": "A material that fills the line with an image."
    },
    "scale": {
      "$ref": "Scale.json",
      "description": "The scaling to apply to the model node.",
      "default": "[1.0, 1.0, 1.0]"
    },
    "pixelOffset": {
      "$ref": "PixelOffset.json",
      "description": "The offset, in viewport pixels, of the label origin from the `position`. A pixel offset is the number of pixels up and to the right to place the label, relative to the `position`.",
      "default": "[0.0, 0.0]"
    },
    "eyeOffset": {
      "$ref": "EyeOffset.json",
      "description": "The eye offset of the label, which is the offset in eye coordinates at which to place the label relative to the `position` property. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis points up, and the Z-axis points into the screen.",
      "default": "[0.0, 0.0, 0.0]"
    },
    "horizontalOrigin": {
      "$ref": "HorizontalOrigin.json",
      "description": "The horizontal origin of the label. It controls whether the label is left-, center-, or right-aligned with the `position`.",
      "default": "CENTER"
    },
    "verticalOrigin": {
      "$ref": "Values/VerticalOriginValue.json",
      "description": "The vertical origin."
    },
    "heightReference": {
      "$ref": "HeightReference.json",
      "description": "The height reference of the rectangle, which indicates if `height` is relative to terrain or not.",
      "default": "NONE"
    },
    "color": {
      "$ref": "Color.json",
      "description": "The color of the surface.",
      "default": "white"
    },
    "rotation": {
      "$ref": "Double.json",
      "description": "The rotation of the rectangle clockwise from north.",
      "default": 0
    },
    "alignedAxis": {
      "$ref": "AlignedAxis.json",
      "description": "The aligned axis is the unit vector, in world coordinates, that the billboard up vector points towards. The default is the zero vector, which means the billboard is aligned to the screen up vector.",
      "default": "[0.0, 0.0, 0.0]"
    },
    "sizeInMeters": {
      "$ref": "Boolean.json",
      "description": "Whether this billboard's size (`width` and `height`) should be measured in meters, otherwise size is measured in pixels.",
      "default": false
    },
    "width": {
      "$ref": "Double.json",
      "description": "The width of the polyline.",
      "default": 1
    },
    "height": {
      "$ref": "Double.json",
      "description": "The height of the rectangle.",
      "default": 0
    },
    "scaleByDistance": {
      "$ref": "NearFarScalar.json",
      "description": "How the point's scale should change based on the point's distance from the camera. This scalar value will be multiplied by `pixelSize`."
    },
    "translucencyByDistance": {
      "$ref": "NearFarScalar.json",
      "description": "How the point's translucency should change based on the point's distance from the camera. This scalar value should range from 0 to 1."
    },
    "pixelOffsetScaleByDistance": {
      "$ref": "NearFarScalar.json",
      "description": "How the label's pixel offset should change based on the label's distance from the camera. This scalar value will be multiplied by `pixelOffset`."
    },
    "imageSubRegion": {
      "$ref": "BoundingRectangle.json",
      "description": "A sub-region of the image which will be used for the billboard, rather than the entire image, measured in pixels from the bottom-left."
    },
    "distanceDisplayCondition": {
      "$ref": "DistanceDisplayCondition.json",
      "description": "The display condition specifying at what distance from the camera this wall will be displayed."
    },
    "disableDepthTestDistance": {
      "$ref": "Double.json",
      "description": "The distance from the camera at which to disable the depth test. This can be used to prevent clipping against terrain, for example. When set to zero, the depth test is always applied. When set to Infinity, the depth test is never applied.",
      "default": 0
    },
    "boolean": {
      "$ref": "Values/BooleanValue.json",
      "description": "The property specified as a boolean value."
    },
    "boundingRectangle": {
      "$ref": "Values/BoundingRectangleValue.json",
      "description": "The property specified as `[X, Y, Width, Height]`."
    },
    "dimensions": {
      "$ref": "BoxDimensions.json",
      "description": "The dimensions of the box.",
      "czmlRequiredForDisplay": true
    },
    "fill": {
      "$ref": "Boolean.json",
      "description": "Whether or not the wall is filled.",
      "default": true
    },
    "material": {
      "$ref": "Material.json",
      "description": "The material to display on the surface of the wall.",
      "default": "solid white"
    },
    "outline": {
      "$ref": "Boolean.json",
      "description": "Whether or not the wall is outlined.",
      "default": false
    },
    "outlineColor": {
      "$ref": "Color.json",
      "description": "The color of the wall outline.",
      "default": "black"
    },
    "outlineWidth": {
      "$ref": "Double.json",
      "description": "The width of the wall outline.",
      "default": 1
    },
    "shadows": {
      "$ref": "ShadowMode.json",
      "description": "Whether or not the wall casts or receives shadows.",
      "default": "DISABLED"
    },
    "cartesian": {
      "$ref": "Values/Cartesian3Value.json",
      "description": "The offset specified as a three-dimensional Cartesian value `[X, Y, Z]`."
    },
    "evenColor": {
      "$ref": "Color.json",
      "description": "The even color.",
      "default": "white"
    },
    "oddColor": {
      "$ref": "Color.json",
      "description": "The odd color.",
      "default": "black"
    },
    "repeat": {
      "$ref": "Double.json",
      "description": "The number of times the stripes repeat.",
      "default": 1
    },
    "classificationType": {
      "$ref": "ClassificationType.json",
      "description": "Whether a classification affects terrain, 3D Tiles, or both.",
      "default": "BOTH"
    },
    "currentTime": {
      "$ref": "Values/TimeValue.json",
      "description": "The current time, specified in ISO8601 format."
    },
    "multiplier": {
      "description": "The multiplier. When `step` is set to `TICK_DEPENDENT`, this is the number of seconds to advance each tick. When `step` is set to `SYSTEM_CLOCK_DEPENDENT`, this is multiplied by the elapsed system time between ticks. This value is ignored in `SYSTEM_CLOCK` mode.",
      "type": "number",
      "default": 1
    },
    "range": {
      "$ref": "Values/ClockRangeValue.json",
      "description": "The behavior when the current time reaches its start or end times.",
      "default": "LOOP_STOP"
    },
    "step": {
      "$ref": "Values/ClockStepValue.json",
      "description": "How the current time advances each tick.",
      "default": "SYSTEM_CLOCK_MULTIPLIER"
    },
    "rgba": {
      "$ref": "Values/RgbaValue.json",
      "description": "The property specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255."
    },
    "rgbaf": {
      "$ref": "Values/RgbafValue.json",
      "description": "The property specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0."
    },
    "colorBlendMode": {
      "$ref": "ColorBlendMode.json",
      "description": "The mode to use for blending between `color` and the model's color.",
      "default": "HIGHLIGHT"
    },
    "cornerType": {
      "$ref": "CornerType.json",
      "description": "The style of the corners of the volume.",
      "default": "ROUNDED"
    },
    "positions": {
      "$ref": "PositionList.json",
      "description": "The array of positions defining the centerline of the wall.",
      "czmlRequiredForDisplay": true
    },
    "extrudedHeight": {
      "$ref": "Double.json",
      "description": "The extruded height of the rectangle."
    },
    "extrudedHeightReference": {
      "$ref": "HeightReference.json",
      "description": "The extruded height reference of the rectangle, which indicates if `extrudedHeight` is relative to terrain or not.",
      "default": "NONE"
    },
    "granularity": {
      "$ref": "Double.json",
      "description": "The sampling distance, in radians.",
      "default": "π / 180.0"
    },
    "zIndex": {
      "$ref": "Integer.json",
      "description": "The z-index of the rectangle, used for ordering ground geometry. Only has an effect if the rectangle is constant, and `height` and `extrudedHeight` are not specified.",
      "default": "0"
    },
    "cartographicRadians": {
      "$ref": "Values/CartographicRadiansListOfListsValue.json",
      "description": "The list of lists of positions specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters."
    },
    "cartographicDegrees": {
      "$ref": "Values/CartographicDegreesListOfListsValue.json",
      "description": "The list of lists of positions specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters."
    },
    "spherical": {
      "$ref": "Values/SphericalListValue.json",
      "description": "The list of directions specified as spherical values `[Clock, Cone, Magnitude, Clock, Cone, Magnitude, ...]`, with angles in radians and magnitude in meters. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis."
    },
    "labelStyle": {
      "$ref": "Values/LabelStyleValue.json",
      "description": "The label style."
    },
    "nearFarScalar": {
      "$ref": "Values/NearFarScalarValue.json",
      "description": "The value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`, with distances in eye coordinates in meters."
    },
    "unitQuaternion": {
      "$ref": "Values/UnitQuaternionValue.json",
      "description": "The rotation specified as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`."
    },
    "shadowMode": {
      "$ref": "Values/ShadowModeValue.json",
      "description": "The shadow mode."
    },
    "string": {
      "$ref": "Values/StringValue.json",
      "description": "The string value."
    },
    "stripeOrientation": {
      "$ref": "Values/StripeOrientationValue.json",
      "description": "The orientation of stripes in the stripe material."
    },
    "wsen": {
      "$ref": "Values/CartographicRectangleRadiansValue.json",
      "description": "The set of coordinates specified as Cartographic values `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians."
    },
    "wsenDegrees": {
      "$ref": "Values/CartographicRectangleDegreesValue.json",
      "description": "The set of coordinates specified as Cartographic values `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees."
    },
    "uri": {
      "$ref": "Values/UriValue.json",
      "description": "The URI value."
    },
    "length": {
      "$ref": "../../Double.json",
      "description": "The graphical length of the vector, in meters.",
      "default": 1
    },
    "topRadius": {
      "$ref": "Double.json",
      "description": "The radius of the top of the cylinder.",
      "czmlRequiredForDisplay": true
    },
    "bottomRadius": {
      "$ref": "Double.json",
      "description": "The radius of the bottom of the cylinder.",
      "czmlRequiredForDisplay": true
    },
    "numberOfVerticalLines": {
      "$ref": "Integer.json",
      "description": "The number of vertical lines to use when outlining an extruded ellipse.",
      "default": "16"
    },
    "slices": {
      "$ref": "Integer.json",
      "description": "The number of edges around the perimeter of the cylinder.",
      "default": 128
    },
    "delete": {
      "description": "Whether the client should delete all existing data for this object, identified by ID. If true, all other properties in this packet will be ignored.",
      "type": "boolean"
    },
    "array": {
      "$ref": "Values/DoubleListValue.json",
      "description": "The list of values specified as an array of numbers."
    },
    "references": {
      "$ref": "Values/ReferenceListOfListsValue.json",
      "description": "The list of lists of positions specified as references. Each reference is to a property that defines a single position, which may change with time."
    },
    "semiMajorAxis": {
      "$ref": "Double.json",
      "description": "The length of the ellipse's semi-major axis in meters.",
      "czmlRequiredForDisplay": true
    },
    "semiMinorAxis": {
      "$ref": "Double.json",
      "description": "The length of the ellipse's semi-minor axis in meters.",
      "czmlRequiredForDisplay": true
    },
    "stRotation": {
      "$ref": "Double.json",
      "description": "The rotation of any applied texture. A positive rotation is counter-clockwise.",
      "default": 0
    },
    "radii": {
      "$ref": "EllipsoidRadii.json",
      "description": "The radii of the ellipsoid.",
      "czmlRequiredForDisplay": true
    },
    "innerRadii": {
      "$ref": "EllipsoidRadii.json",
      "description": "The inner radii of the ellipsoid."
    },
    "minimumClock": {
      "$ref": "Double.json",
      "description": "The minimum clock angle of the ellipsoid.",
      "default": 0
    },
    "maximumClock": {
      "$ref": "Double.json",
      "description": "The maximum clock angle of the ellipsoid.",
      "default": "2π"
    },
    "minimumCone": {
      "$ref": "Double.json",
      "description": "The minimum cone angle of the ellipsoid.",
      "default": 0
    },
    "maximumCone": {
      "$ref": "Double.json",
      "description": "The maximum cone angle of the ellipsoid.",
      "default": "π"
    },
    "stackPartitions": {
      "$ref": "Integer.json",
      "description": "The number of times to partition the ellipsoid into stacks.",
      "default": 64
    },
    "slicePartitions": {
      "$ref": "Integer.json",
      "description": "The number of times to partition the ellipsoid into radial slices.",
      "default": 64
    },
    "subdivisions": {
      "$ref": "Integer.json",
      "description": "The number of samples per outline ring, determining the granularity of the curvature.",
      "default": 128
    },
    "innerHalfAngle": {
      "$ref": "../../Double.json",
      "description": "The inner half angle of the cone.",
      "default": 0
    },
    "outerHalfAngle": {
      "$ref": "../../Double.json",
      "description": "The outer half angle of the cone.",
      "default": "π"
    },
    "minimumClockAngle": {
      "$ref": "../../Double.json",
      "description": "The minimum clock angle limit of the cone.",
      "default": 0
    },
    "maximumClockAngle": {
      "$ref": "../../Double.json",
      "description": "The maximum clock angle limit of the cone.",
      "default": "2π"
    },
    "radius": {
      "$ref": "../../Double.json",
      "description": "The radial limit of the sensor.",
      "default": "Infinity"
    },
    "showIntersection": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not the intersection of the sensor with the Earth is shown.",
      "default": true
    },
    "intersectionColor": {
      "$ref": "../../Color.json",
      "description": "The color of the intersection of the sensor with the Earth.",
      "default": "white"
    },
    "intersectionWidth": {
      "$ref": "../../Double.json",
      "description": "The width of the intersection in pixels.",
      "default": 1
    },
    "showLateralSurfaces": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not the lateral surfaces, i.e., the outer sides of the sensor, are shown.",
      "default": true
    },
    "lateralSurfaceMaterial": {
      "$ref": "../../Material.json",
      "description": "The material to use for the sensor's lateral surface, i.e., the outer sides of the sensor.",
      "default": "solid white"
    },
    "showEllipsoidSurfaces": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not ellipsoid surfaces are shown.",
      "default": true
    },
    "ellipsoidSurfaceMaterial": {
      "$ref": "../../Material.json",
      "description": "The material to use for the sensor's ellipsoid surfaces.",
      "default": "solid white"
    },
    "showEllipsoidHorizonSurfaces": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not ellipsoid horizon surfaces are shown.",
      "default": true
    },
    "ellipsoidHorizonSurfaceMaterial": {
      "$ref": "../../Material.json",
      "description": "The material to use for the sensor's ellipsoid horizon surfaces.",
      "default": "solid white"
    },
    "showDomeSurfaces": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not dome surfaces are shown.",
      "default": true
    },
    "domeSurfaceMaterial": {
      "$ref": "../../Material.json",
      "description": "The material to use for the sensor's dome surfaces.",
      "default": "solid white"
    },
    "portionToDisplay": {
      "$ref": "../../Extensions/AGI/SensorVolumePortionToDisplayValue.json",
      "description": "The part of a sensor to display."
    },
    "environmentConstraint": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not the sensor will be occluded by objects in the current view of the environment, e.g. visible terrain or models.",
      "default": false
    },
    "showEnvironmentOcclusion": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not the portion of the terrain occluded by the environment will be drawn with a separate material.",
      "default": false
    },
    "environmentOcclusionMaterial": {
      "$ref": "../../Material.json",
      "description": "The material to use for the portion of the sensor occluded by the environment.",
      "default": "solid white"
    },
    "showEnvironmentIntersection": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not a line showing where the sensor intersects the environment will be drawn.",
      "default": false
    },
    "environmentIntersectionColor": {
      "$ref": "../../Color.json",
      "description": "The color of the intersection line between the sensor and the environment.",
      "default": "white"
    },
    "environmentIntersectionWidth": {
      "$ref": "../../Double.json",
      "description": "The width in meters of the intersection line between the sensor and the environment.",
      "default": 5
    },
    "showThroughEllipsoid": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not a sensor intersecting the ellipsoid is drawn through the ellipsoid and potentially out to the other side.",
      "default": false
    },
    "showViewshed": {
      "$ref": "../../Boolean.json",
      "description": "Whether or not the viewshed of the sensor will be drawn.",
      "default": false
    },
    "viewshedVisibleColor": {
      "$ref": "../../Color.json",
      "description": "The color of the scene geometry that is visible to the sensor.",
      "default": "lime, 50% transparent"
    },
    "viewshedOccludedColor": {
      "$ref": "../../Color.json",
      "description": "The color of the scene geometry that is not visible to the sensor.",
      "default": "red, 50% transparent"
    },
    "viewshedResolution": {
      "$ref": "../../Integer.json",
      "description": "The resolution in pixels of the viewshed.",
      "default": 2048
    },
    "directions": {
      "$ref": "../../DirectionList.json",
      "description": "The list of directions defining the fan.",
      "czmlRequiredForDisplay": true
    },
    "perDirectionRadius": {
      "$ref": "../../Boolean.json",
      "description": "Whether the magnitude of each direction is used instead of a constant radius.",
      "default": false
    },
    "numberOfRings": {
      "$ref": "../../Integer.json",
      "description": "The number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center.",
      "default": 6
    },
    "xHalfAngle": {
      "$ref": "../../Double.json",
      "description": "The X half angle.",
      "default": "π / 2"
    },
    "yHalfAngle": {
      "$ref": "../../Double.json",
      "description": "The Y half angle.",
      "default": "π / 2"
    },
    "direction": {
      "$ref": "../../Direction.json",
      "description": "The direction of the vector.",
      "czmlRequiredForDisplay": true
    },
    "minimumLengthInPixels": {
      "$ref": "../../Double.json",
      "description": "The minimum graphical length of the vector in pixels.",
      "default": 0
    },
    "font": {
      "$ref": "Font.json",
      "description": "The font to use for the label.",
      "default": "30px sans-serif"
    },
    "cellAlpha": {
      "$ref": "Double.json",
      "description": "The alpha value for the space between grid lines. This will be combined with the color alpha.",
      "default": 0.1
    },
    "lineCount": {
      "$ref": "LineCount.json",
      "description": "The number of grid lines along each axis.",
      "default": "[8, 8]"
    },
    "lineThickness": {
      "$ref": "LineThickness.json",
      "description": "The thickness of grid lines along each axis, in pixels.",
      "default": "[1.0, 1.0]"
    },
    "lineOffset": {
      "$ref": "LineOffset.json",
      "description": "The offset of grid lines along each axis, as a percentage from 0 to 1.",
      "default": "[0.0, 0.0]"
    },
    "transparent": {
      "$ref": "Boolean.json",
      "description": "Whether or not the image has transparency.",
      "default": false
    },
    "epoch": {
      "description": "The epoch to use for times specified as seconds since an epoch.",
      "type": "string",
      "format": "date-time"
    },
    "interpolationAlgorithm": {
      "description": "The interpolation algorithm to use when interpolating. Valid values are \"LINEAR\", \"LAGRANGE\", and \"HERMITE\".",
      "type": "string",
      "default": "LINEAR"
    },
    "interpolationDegree": {
      "description": "The degree of interpolation to use when interpolating.",
      "type": "number",
      "default": 1
    },
    "forwardExtrapolationType": {
      "description": "The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are \"NONE\", \"HOLD\", and \"EXTRAPOLATE\".",
      "type": "string",
      "default": "NONE"
    },
    "forwardExtrapolationDuration": {
      "description": "The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.",
      "type": "number",
      "default": 0
    },
    "backwardExtrapolationType": {
      "description": "The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are \"NONE\", \"HOLD\", and \"EXTRAPOLATE\".",
      "type": "string",
      "default": "NONE"
    },
    "backwardExtrapolationDuration": {
      "description": "The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.",
      "type": "number",
      "default": 0
    },
    "text": {
      "$ref": "String.json",
      "description": "The text displayed by the label. The newline character (\\n) indicates line breaks."
    },
    "style": {
      "$ref": "LabelStyle.json",
      "description": "The style of the label.",
      "default": "FILL"
    },
    "showBackground": {
      "$ref": "Boolean.json",
      "description": "Whether or not a background behind the label is shown.",
      "default": false
    },
    "backgroundColor": {
      "$ref": "Color.json",
      "description": "The color of the background behind the label.",
      "default": "[0.165, 0.165, 0.165, 0.8]"
    },
    "backgroundPadding": {
      "$ref": "BackgroundPadding.json",
      "description": "The amount of padding between the text and the label's background.",
      "default": "[7, 5]"
    },
    "fillColor": {
      "$ref": "Color.json",
      "description": "The fill color of the label.",
      "default": "white"
    },
    "solidColor": {
      "$ref": "SolidColorMaterial.json",
      "description": "A material that fills the line with a solid color, which may be translucent."
    },
    "grid": {
      "$ref": "GridMaterial.json",
      "description": "A material that fills the line with a grid."
    },
    "stripe": {
      "$ref": "StripeMaterial.json",
      "description": "A material that fills the line with alternating colors."
    },
    "checkerboard": {
      "$ref": "CheckerboardMaterial.json",
      "description": "A material that fills the line with a checkerboard pattern."
    },
    "gltf": {
      "$ref": "Uri.json",
      "description": "The URI of a <a href=\"https://github.com/KhronosGroup/glTF\">glTF</a> model. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). The URI may also be a <a href=\"https://developer.mozilla.org/en/data_URIs\">data URI</a>.",
      "czmlRequiredForDisplay": true
    },
    "minimumPixelSize": {
      "$ref": "Double.json",
      "description": "The approximate minimum pixel size of the model regardless of zoom.",
      "default": 0
    },
    "maximumScale": {
      "$ref": "Double.json",
      "description": "The maximum scale size of the model. This is used as an upper limit for `minimumPixelSize`."
    },
    "incrementallyLoadTextures": {
      "$ref": "Boolean.json",
      "description": "Whether or not the model can be rendered before all textures have loaded.",
      "default": true
    },
    "runAnimations": {
      "$ref": "Boolean.json",
      "description": "Whether or not to run all animations defined in the glTF model.",
      "default": true
    },
    "silhouetteColor": {
      "$ref": "Color.json",
      "description": "The color of the silhouette drawn around the model.",
      "default": "red"
    },
    "silhouetteSize": {
      "$ref": "Double.json",
      "description": "The size, in pixels, of the silhouette drawn around the model.",
      "default": 0
    },
    "colorBlendAmount": {
      "$ref": "Double.json",
      "description": "The color strength when `colorBlendMode` is `MIX`. A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.",
      "default": 0.5
    },
    "nodeTransformations": {
      "$ref": "NodeTransformations.json",
      "czmlExamples": [
        "Examples/ModelNodeTransformations.json"
      ]
    },
    "articulations": {
      "$ref": "Articulations.json",
      "czmlExamples": [
        "Examples/ModelArticulations.json"
      ]
    },
    "translation": {
      "$ref": "Translation.json",
      "description": "The translation to apply to the model node.",
      "default": "[0.0, 0.0, 0.0]"
    },
    "id": {
      "description": "The ID of the object described by this packet. IDs do not need to be GUIDs, but they do need to uniquely identify a single object within a CZML source and any other CZML sources loaded into the same scope. If this property is not specified, the client will automatically generate a unique one. However, this prevents later packets from referring to this object in order to add more data to it.",
      "type": "string"
    },
    "name": {
      "description": "The name of the object. It does not have to be unique and is intended for user consumption.",
      "type": "string"
    },
    "parent": {
      "description": "The ID of the parent object, if any.",
      "type": "string"
    },
    "description": {
      "$ref": "String.json",
      "description": "An HTML description of the object."
    },
    "clock": {
      "$ref": "Clock.json",
      "description": "The clock settings for the entire data set. Only valid on the document object."
    },
    "version": {
      "description": "The CZML version being written. Only valid on the document object.",
      "type": "string"
    },
    "availability": {
      "$ref": "Values/TimeIntervalCollectionValue.json",
      "description": "The set of time intervals over which data for an object is available. The property can be a single string specifying a single interval, or an array of strings representing intervals. A later CZML packet can update this availability if it changes or is found to be incorrect. For example, an SGP4 propagator may initially report availability for all time, but then later the propagator throws an exception and the availability can be adjusted to end at that time. If this optional property is not present, the object is assumed to be available for all time. Availability is scoped to a particular CZML stream, so two different streams can list different availability for a single object. Within a single stream, the last availability stated for an object is the one in effect and any availabilities in previous packets are ignored. If an object is not available at a time, the client will not draw that object.",
      "default": "0000-00-00T00:00:00Z/9999-12-31T24:00:00Z"
    },
    "properties": {
      "$ref": "CustomProperties.json",
      "description": "A set of custom properties for this object."
    },
    "position": {
      "$ref": "Position.json",
      "description": "The position of the object in the world. The position has no direct visual representation, but it is used to locate billboards, labels, and other graphical items attached to the object.",
      "czmlExamples": [
        "Examples/SimplePosition.json",
        "Examples/TimeVaryingPosition.json"
      ]
    },
    "orientation": {
      "$ref": "StripeOrientation.json",
      "description": "The value indicating if the stripes are horizontal or vertical.",
      "default": "HORIZONTAL"
    },
    "viewFrom": {
      "$ref": "ViewFrom.json",
      "description": "A suggested camera location when viewing this object. The property is specified as a Cartesian position in the East (x), North (y), Up (z) reference frame relative to the object's position."
    },
    "billboard": {
      "$ref": "Billboard.json",
      "description": "A billboard, or viewport-aligned image, sometimes called a marker. The billboard is positioned in the scene by the `position` property."
    },
    "box": {
      "$ref": "Box.json",
      "description": "A box, which is a closed rectangular cuboid. The box is positioned and oriented using the `position` and `orientation` properties."
    },
    "corridor": {
      "$ref": "Corridor.json",
      "description": "A corridor, which is a shape defined by a centerline and width."
    },
    "cylinder": {
      "$ref": "Cylinder.json",
      "description": "A cylinder, truncated cone, or cone defined by a length, top radius, and bottom radius. The cylinder is positioned and oriented using the `position` and `orientation` properties."
    },
    "ellipse": {
      "$ref": "Ellipse.json",
      "description": "An ellipse, which is a closed curve on the surface of the Earth. The ellipse is positioned using the `position` property."
    },
    "ellipsoid": {
      "$ref": "Ellipsoid.json",
      "description": "An ellipsoid, which is a closed quadric surface that is a three-dimensional analogue of an ellipse. The ellipsoid is positioned and oriented using the `position` and `orientation` properties."
    },
    "label": {
      "$ref": "Label.json",
      "description": "A string of text. The label is positioned in the scene by the `position` property."
    },
    "model": {
      "$ref": "Model.json",
      "description": "A 3D model. The model is positioned and oriented using the `position` and `orientation` properties."
    },
    "path": {
      "$ref": "Path.json",
      "description": "A path, which is a polyline defined by the motion of an object over time. The possible vertices of the path are specified by the `position` property."
    },
    "point": {
      "$ref": "Point.json",
      "description": "A point, or viewport-aligned circle. The point is positioned in the scene by the `position` property."
    },
    "polygon": {
      "$ref": "Polygon.json",
      "description": "A polygon, which is a closed figure on the surface of the Earth."
    },
    "polyline": {
      "$ref": "Polyline.json",
      "description": "A polyline, which is a line in the scene composed of multiple segments."
    },
    "polylineVolume": {
      "$ref": "PolylineVolume.json",
      "description": "A polyline with a volume, defined as a 2D shape extruded along a polyline."
    },
    "rectangle": {
      "$ref": "Rectangle.json",
      "description": "A cartographic rectangle, which conforms to the curvature of the globe and can be placed along the surface or at altitude."
    },
    "tileset": {
      "$ref": "Tileset.json",
      "description": "A 3D Tiles tileset."
    },
    "wall": {
      "$ref": "Wall.json",
      "description": "A two-dimensional wall which conforms to the curvature of the globe and can be placed along the surface or at altitude."
    },
    "agi_conicSensor": {
      "$ref": "Extensions/AGI/ConicSensor.json",
      "description": "A conical sensor volume taking into account occlusion of an ellipsoid, i.e., the globe. The sensor is positioned and oriented using the `position` and `orientation` properties."
    },
    "agi_customPatternSensor": {
      "$ref": "Extensions/AGI/CustomPatternSensor.json",
      "description": "A custom sensor volume taking into account occlusion of an ellipsoid, i.e., the globe. The sensor is positioned and oriented using the `position` and `orientation` properties."
    },
    "agi_rectangularSensor": {
      "$ref": "Extensions/AGI/RectangularSensor.json",
      "description": "A rectangular pyramid sensor volume taking into account occlusion of an ellipsoid, i.e., the globe. The sensor is positioned and oriented using the `position` and `orientation` properties."
    },
    "agi_fan": {
      "$ref": "Extensions/AGI/Fan.json",
      "description": "Defines a fan, which starts at a point or apex and extends in a specified list of directions from the apex. Each pair of directions forms a face of the fan extending to the specified radius. The fan is positioned and oriented using the `position` and `orientation` properties."
    },
    "agi_vector": {
      "$ref": "Extensions/AGI/Vector.json",
      "description": "Defines a graphical vector that originates at the `position` property and extends in the provided direction for the provided length. The vector is positioned using the `position` property."
    },
    "leadTime": {
      "$ref": "Double.json",
      "description": "The time ahead of the animation time, in seconds, to show the path. The time will be limited to not exceed the object's availability. By default, the value is unlimited, which effectively results in drawing the entire available path of the object."
    },
    "trailTime": {
      "$ref": "Double.json",
      "description": "The time behind the animation time, in seconds, to show the path. The time will be limited to not exceed the object's availability. By default, the value is unlimited, which effectively results in drawing the entire available path of the object."
    },
    "resolution": {
      "$ref": "Double.json",
      "description": "The maximum step-size, in seconds, used to sample the path. If the `position` property has data points farther apart than resolution specifies, additional samples will be computed, creating a smoother path.",
      "default": 60
    },
    "pixelSize": {
      "$ref": "Double.json",
      "description": "The size of the point, in pixels.",
      "default": 1
    },
    "holes": {
      "$ref": "PositionListOfLists.json",
      "description": "The array of arrays of positions defining holes in the polygon."
    },
    "perPositionHeight": {
      "$ref": "Boolean.json",
      "description": "Whether to use the height of each position to define the polygon or to use `height` as a constant height above the surface.",
      "default": false
    },
    "closeTop": {
      "$ref": "Boolean.json",
      "description": "Whether to close the top of the polygon.",
      "default": true
    },
    "closeBottom": {
      "$ref": "Boolean.json",
      "description": "Whether to close the bottom of the polygon.",
      "default": true
    },
    "followSurface": {
      "$ref": "Boolean.json",
      "description": "Whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by `arcType`, which should be used instead.",
      "default": true
    },
    "depthFailMaterial": {
      "$ref": "PolylineMaterial.json",
      "description": "The material to use to draw the polyline when it is below the terrain."
    },
    "clampToGround": {
      "$ref": "Boolean.json",
      "description": "Whether or not the polyline should be clamped to the ground.",
      "default": false
    },
    "gapColor": {
      "$ref": "Color.json",
      "description": "The color of the gaps between dashes on the line.",
      "default": "transparent"
    },
    "dashLength": {
      "$ref": "Double.json",
      "description": "The length in screen-space pixels of a single dash and gap pattern.",
      "default": 16
    },
    "dashPattern": {
      "$ref": "Integer.json",
      "description": "A 16-bit bitfield representing which portions along a single dashLength are the dash (1) and which are the gap (0). The default value, 255 (0000000011111111), indicates 50% gap followed by 50% dash.",
      "default": 255
    },
    "glowPower": {
      "$ref": "Double.json",
      "description": "The strength of the glow.",
      "default": 0.25
    },
    "taperPower": {
      "$ref": "Double.json",
      "description": "The strength of the tapering effect.  1.0 and higher means no tapering.",
      "default": 1
    },
    "polylineOutline": {
      "$ref": "PolylineOutlineMaterial.json",
      "description": "A material that fills the line with a color and outline."
    },
    "polylineArrow": {
      "$ref": "PolylineArrowMaterial.json",
      "description": "A material that fills the line with an arrow."
    },
    "polylineDash": {
      "$ref": "PolylineDashMaterial.json",
      "description": "A material that fills the line with a pattern of dashes."
    },
    "polylineGlow": {
      "$ref": "PolylineGlowMaterial.json",
      "description": "A material that fills the line with a glowing color."
    },
    "shape": {
      "$ref": "Shape.json",
      "description": "The array of positions defining the shape of the volume to be extruded.",
      "czmlRequiredForDisplay": true
    },
    "referenceFrame": {
      "description": "The reference frame in which cartesian positions are specified. Possible values are \"FIXED\" and \"INERTIAL\".",
      "type": "string",
      "default": "FIXED"
    },
    "cartesianVelocity": {
      "$ref": "Values/Cartesian3VelocityValue.json",
      "description": "The position and velocity specified as a three-dimensional Cartesian value and its derivative, `[X, Y, Z, dX, dY, dZ]`, in meters relative to the `referenceFrame`."
    },
    "coordinates": {
      "$ref": "RectangleCoordinates.json",
      "description": "The coordinates of the rectangle.",
      "czmlRequiredForDisplay": true
    },
    "offset": {
      "$ref": "Double.json",
      "description": "The value indicating where in the pattern to begin drawing, with 0.0 being the beginning of the even color, 1.0 the beginning of the odd color, 2.0 being the even color again, and any multiple or fractional values being in between.",
      "default": 0
    },
    "maximumScreenSpaceError": {
      "$ref": "Double.json",
      "description": "The maximum screen space error used to drive level of detail refinement."
    },
    "minimumHeights": {
      "$ref": "DoubleList.json",
      "description": "The list of heights to be used for the bottom of the wall, instead of the surface."
    },
    "maximumHeights": {
      "$ref": "DoubleList.json",
      "description": "The list of heights to be used for the top of the wall, instead of the height of each position."
    }
  },
  "summary": {
    "totalFilesProcessed": 83,
    "totalKeyValuePairs": 215,
    "processedAt": "2025-10-11T08:09:56.286Z"
  }
}